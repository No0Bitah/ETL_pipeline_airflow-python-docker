{"timestamp":"2025-05-06T03:17:59.756940","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-05-06T03:17:59.757364","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/covid_pipeline_dag.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-05-06T03:17:59.797653Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-06T03:17:59.798142Z","level":"info","event":" Previous state of the Task instance: queued","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-06T03:17:59.801659Z","level":"info","event":"Current task name:load_covid_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-06T03:17:59.801902Z","level":"info","event":"Dag name:covid19_etl_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-06T03:17:59.786939","level":"info","event":"Starting data loading process to PostgreSQL database using connection: covid_data","logger":"covid_etl.load"}
{"timestamp":"2025-05-06T03:17:59.788144","level":"info","event":"Secrets backends loaded for worker","count":1,"backend_classes":["EnvironmentVariablesBackend"],"logger":"supervisor"}
{"timestamp":"2025-05-06T03:17:59.807617","level":"info","event":"Connection Retrieved 'covid_data'","logger":"airflow.hooks.base"}
{"timestamp":"2025-05-06T03:17:59.810595","level":"info","event":"Database schema created successfully","logger":"covid_etl.load"}
{"timestamp":"2025-05-06T03:17:59.811468","level":"info","event":"file path is /opt/airflow/data/processed/covid_data_transformed.csv","logger":"covid_etl.load"}
{"timestamp":"2025-05-06T03:17:59.812713","level":"info","event":"Loading covid_data_transformed.csv into full_data table","logger":"covid_etl.load"}
{"timestamp":"2025-05-06T03:18:00.176847","level":"info","event":"CSV read complete. Shape: (330327, 10)","logger":"covid_etl.load"}
{"timestamp":"2025-05-06T03:18:00.352002","level":"info","event":"Running statement: DROP TABLE IF EXISTS full_data CASCADE, parameters: None","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-05-06T03:18:00.360598","level":"info","event":"Creating test table and loading 330327 rows","logger":"covid_etl.load"}
{"timestamp":"2025-05-06T03:18:10.643845","level":"info","event":"Running statement: SELECT COUNT(*) FROM full_data, parameters: None","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-05-06T03:18:10.657953","level":"info","event":"Rows affected: 1","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-05-06T03:18:10.658490","level":"info","event":"Loaded 330327 rows into full_data","logger":"covid_etl.load"}
{"timestamp":"2025-05-06T03:18:10.658567","level":"info","event":"file path is /opt/airflow/data/processed/covid_data_by_country.csv","logger":"covid_etl.load"}
{"timestamp":"2025-05-06T03:18:10.660211","level":"info","event":"Loading covid_data_by_country.csv into country_summary table","logger":"covid_etl.load"}
{"timestamp":"2025-05-06T03:18:10.842366","level":"info","event":"CSV read complete. Shape: (229743, 7)","logger":"covid_etl.load"}
{"timestamp":"2025-05-06T03:18:11.021175","level":"info","event":"Running statement: DROP TABLE IF EXISTS country_summary CASCADE, parameters: None","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-05-06T03:18:11.026134","level":"info","event":"Creating test table and loading 229743 rows","logger":"covid_etl.load"}
{"timestamp":"2025-05-06T03:18:15.855185","level":"info","event":"Running statement: SELECT COUNT(*) FROM country_summary, parameters: None","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-05-06T03:18:15.868639","level":"info","event":"Rows affected: 1","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-05-06T03:18:15.868931","level":"info","event":"Loaded 229743 rows into country_summary","logger":"covid_etl.load"}
{"timestamp":"2025-05-06T03:18:15.868996","level":"info","event":"file path is /opt/airflow/data/processed/covid_daily_changes.csv","logger":"covid_etl.load"}
{"timestamp":"2025-05-06T03:18:15.870279","level":"info","event":"Loading covid_daily_changes.csv into daily_changes table","logger":"covid_etl.load"}
{"timestamp":"2025-05-06T03:18:16.232768","level":"info","event":"CSV read complete. Shape: (330327, 13)","logger":"covid_etl.load"}
{"timestamp":"2025-05-06T03:18:16.438627","level":"info","event":"Running statement: DROP TABLE IF EXISTS daily_changes CASCADE, parameters: None","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-05-06T03:18:16.446496","level":"info","event":"Creating test table and loading 330327 rows","logger":"covid_etl.load"}
{"timestamp":"2025-05-06T03:18:28.738175","level":"info","event":"Running statement: SELECT COUNT(*) FROM daily_changes, parameters: None","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-05-06T03:18:28.752432","level":"info","event":"Rows affected: 1","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-05-06T03:18:28.752986","level":"info","event":"Loaded 330327 rows into daily_changes","logger":"covid_etl.load"}
{"timestamp":"2025-05-06T03:18:28.754985","level":"info","event":"Running statement: \n        CREATE OR REPLACE VIEW vw_latest_global_summary AS\n        SELECT \n            SUM(confirmed) as total_confirmed,\n            SUM(deaths) as total_deaths,\n            SUM(recovered) as total_recovered,\n            SUM(active) as total_active,\n            (CAST(SUM(deaths) AS FLOAT) / NULLIF(CAST(SUM(confirmed) AS FLOAT), 0)) * 100 as global_mortality_rate\n        FROM country_summary\n        WHERE date = (SELECT MAX(date) FROM country_summary)\n        , parameters: None","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-05-06T03:18:28.759007","level":"info","event":"Running statement: \n        CREATE OR REPLACE VIEW vw_top_countries AS\n        SELECT \n            country_region as country,\n            confirmed,\n            deaths,\n            recovered,\n            active,\n            mortality_rate\n        FROM country_summary\n        WHERE date = (SELECT MAX(date) FROM country_summary)\n        ORDER BY confirmed DESC\n        LIMIT 10\n        , parameters: None","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-05-06T03:18:28.762903","level":"info","event":"Running statement: \n        CREATE OR REPLACE VIEW vw_global_daily AS\n        SELECT \n            date,\n            SUM(confirmed) as total_confirmed,\n            SUM(deaths) as total_deaths,\n            SUM(recovered) as total_recovered,\n            SUM(active) as total_active,\n            SUM(new_confirmed) as new_confirmed,\n            SUM(new_deaths) as new_deaths,\n            SUM(new_recovered) as new_recovered\n        FROM daily_changes\n        GROUP BY date\n        ORDER BY date\n        , parameters: None","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-05-06T03:18:28.764640","level":"info","event":"Analytical views created successfully","logger":"covid_etl.load"}
{"timestamp":"2025-05-06T03:18:28.766518","level":"info","event":"Running statement: CREATE INDEX IF NOT EXISTS idx_full_country ON full_data(country_region), parameters: None","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-05-06T03:18:28.914675","level":"info","event":"Running statement: CREATE INDEX IF NOT EXISTS idx_full_date ON full_data(date), parameters: None","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-05-06T03:18:28.985906","level":"info","event":"Running statement: CREATE INDEX IF NOT EXISTS idx_summary_date ON country_summary(date), parameters: None","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-05-06T03:18:29.162981","level":"info","event":"Running statement: CREATE INDEX IF NOT EXISTS idx_changes_country ON daily_changes(country_region), parameters: None","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-05-06T03:18:29.247785","level":"info","event":"Running statement: CREATE INDEX IF NOT EXISTS idx_changes_date ON daily_changes(date), parameters: None","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-05-06T03:18:29.504798","level":"info","event":"Database indexes created successfully","logger":"covid_etl.load"}
{"timestamp":"2025-05-06T03:18:29.507490","level":"info","event":"Running statement: \n        SELECT EXISTS (\n            SELECT FROM information_schema.tables \n            WHERE table_name = %s\n        )\n        , parameters: ('etl_metadata',)","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-05-06T03:18:29.509561","level":"info","event":"Rows affected: 1","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-05-06T03:18:29.511961","level":"info","event":"Running statement: \n            INSERT INTO etl_metadata (operation, timestamp, details)\n            VALUES (%s, %s, %s)\n            , parameters: ('load', '2025-05-06T03:18:29.509854', 'Total rows loaded: 890397')","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-05-06T03:18:29.512641","level":"info","event":"Rows affected: 1","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-05-06T03:18:29.513618","level":"info","event":"Data loading completed successfully: 890397 total rows loaded","logger":"covid_etl.load"}
{"timestamp":"2025-05-06T03:18:29.520642","level":"info","event":"Done. Returned value was: True","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-05-06T03:18:29.520821","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('0196a399-886b-77a2-b771-0842f4cec80b'), task_id='load_covid_data', dag_id='covid19_etl_pipeline', run_id='scheduled__2025-05-06T03:17:49.274870+00:00', try_number=1, map_index=-1, hostname='dfea83ddc14e', context_carrier={}, task=<Task(PythonOperator): load_covid_data>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=1, start_date=datetime.datetime(2025, 5, 6, 3, 17, 59, 413962, tzinfo=TzInfo(UTC)), end_date=None, is_mapped=False)","logger":"task"}
{"timestamp":"2025-05-06T03:18:29.543419Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-06T03:18:29.543713Z","level":"info","event":" Previous state of the Task instance: running","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-06T03:18:29.543943Z","level":"info","event":"Task operator:<Task(PythonOperator): load_covid_data>","chan":"stdout","logger":"task"}
